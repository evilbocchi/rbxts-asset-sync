import crypto from "crypto";
import fs from "fs";
import path from "path";
import { uploadAsset } from "./api.js";
import { assetMapOutputPath, cacheOutputPath, prefix, watchingPath } from "./parameters.js";

let hashToAssetIdMap: Record<string, string> = {};
const pathToAssetIdMap: Record<string, string> = {};

if (fs.existsSync(cacheOutputPath)) {
    hashToAssetIdMap = JSON.parse(fs.readFileSync(cacheOutputPath, "utf8"));
}

function saveCache() {
    fs.writeFileSync(cacheOutputPath, JSON.stringify(hashToAssetIdMap, null, 2));
    console.log(`${prefix} Cache saved to ${cacheOutputPath}`);
}

function saveAssetMap() {
    const lines: string[] = [
        "// Auto-generated by rbx-asset-sync. Do not edit manually.",
        "export const assets = {"
    ];

    for (const [filePath, assetId] of Object.entries(pathToAssetIdMap)) {
        const normalizedPath = filePath.replace(/\\/g, "/");
        lines.push(`  \"${normalizedPath}\": \"rbxassetid://${assetId}\",`);
    }

    lines.push("} as const;\n");
    lines.push("export function getAsset(path: keyof typeof assets): string {\n  return assets[path];\n}");

    fs.writeFileSync(assetMapOutputPath, lines.join("\n"));
    console.log(`${prefix} Asset map saved to ${assetMapOutputPath}`);
}

export async function syncAssetsOnce() {
    const files = getAllAssetFiles(watchingPath);
    for (const file of files) {
        await syncAssetFile(file);
    }
    saveCache();
    saveAssetMap();
}

export async function syncAssetFile(filePath: string) {
    const assetBuffer = fs.readFileSync(filePath);
    const assetName = path.basename(filePath);
    const hash = crypto.createHash("sha1").update(assetBuffer).digest("hex");

    if (hash in hashToAssetIdMap) {
        const assetId = hashToAssetIdMap[hash];
        console.log(`${prefix} ${filePath} reused rbxassetid://${assetId}`);
        pathToAssetIdMap[filePath] = assetId;
        return;
    }

    try {
        const assetId = await uploadAsset(assetName, assetBuffer);
        console.log(`${prefix} Uploaded ${filePath} -> rbxassetid://${assetId}`);
        hashToAssetIdMap[hash] = assetId;
        pathToAssetIdMap[filePath] = assetId;
    } catch (err) {
        console.error(`${prefix} Failed to upload ${filePath}:`, err);
    }
}

function getAllAssetFiles(watchingPath: string): string[] {
    const walk = (dir: string): string[] => {
        let results: string[] = [];
        const list = fs.readdirSync(dir);
        for (const file of list) {
            const filePath = path.join(dir, file);
            const stat = fs.statSync(filePath);
            if (stat && stat.isDirectory()) {
                results = results.concat(walk(filePath));
            } else {
                results.push(filePath);
            }
        }
        return results;
    };

    return walk(watchingPath);
}
